{"ast":null,"code":"#!/usr/bin/env node\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n// /!\\ DO NOT MODIFY THIS FILE /!\\\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//\n// react-native-cli is installed globally on people's computers. This means\n// that it is extremely difficult to have them upgrade the version and\n// because there's only one global version installed, it is very prone to\n// breaking changes.\n//\n// The only job of react-native-cli is to init the repository and then\n// forward all the commands to the local version of react-native.\n//\n// If you need to add a new command, please add it to local-cli/.\n//\n// The only reason to modify this file is to add more warnings and\n// troubleshooting information for the `react-native init` command.\n//\n// Do not make breaking changes! We absolutely don't want to have to\n// tell people to update their global version of react-native-cli.\n//\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n// /!\\ DO NOT MODIFY THIS FILE /!\\\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n'use strict';\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar exec = require('child_process').exec;\n\nvar execSync = require('child_process').execSync;\n\nvar chalk = require('chalk');\n\nvar prompt = require('prompt');\n\nvar semver = require('semver');\n/**\n * Used arguments:\n *   -v --version - to print current version of react-native-cli and react-native dependency\n *   if you are in a RN app folder\n * init - to create a new project and npm install it\n *   --verbose - to print logs while init\n *   --version <alternative react-native package> - override default (https://registry.npmjs.org/react-native@latest),\n *      package to install, examples:\n *     - \"0.22.0-rc1\" - A new app will be created using a specific version of React Native from npm repo\n *     - \"https://registry.npmjs.org/react-native/-/react-native-0.20.0.tgz\" - a .tgz archive from any npm repo\n *     - \"/Users/home/react-native/react-native-0.22.0.tgz\" - for package prepared with `npm pack`, useful for e2e tests\n */\n\n\nvar options = require('minimist')(process.argv.slice(2));\n\nvar CLI_MODULE_PATH = function () {\n  return path.resolve(process.cwd(), 'node_modules', 'react-native', 'cli.js');\n};\n\nvar REACT_NATIVE_PACKAGE_JSON_PATH = function () {\n  return path.resolve(process.cwd(), 'node_modules', 'react-native', 'package.json');\n};\n\nif (options._.length === 0 && (options.v || options.version)) {\n  printVersionsAndExit(REACT_NATIVE_PACKAGE_JSON_PATH());\n} // Use Yarn if available, it's much faster than the npm client.\n// Return the version of yarn installed on the system, null if yarn is not available.\n\n\nfunction getYarnVersionIfAvailable() {\n  var yarnVersion;\n\n  try {\n    // execSync returns a Buffer -> convert to string\n    if (process.platform.startsWith('win')) {\n      yarnVersion = (execSync('yarn --version').toString() || '').trim();\n    } else {\n      yarnVersion = (execSync('yarn --version 2>/dev/null').toString() || '').trim();\n    }\n  } catch (error) {\n    return null;\n  } // yarn < 0.16 has a 'missing manifest' bug\n\n\n  try {\n    if (semver.gte(yarnVersion, '0.16.0')) {\n      return yarnVersion;\n    } else {\n      return null;\n    }\n  } catch (error) {\n    console.error('Cannot parse yarn version: ' + yarnVersion);\n    return null;\n  }\n}\n\nvar cli;\nvar cliPath = CLI_MODULE_PATH();\n\nif (fs.existsSync(cliPath)) {\n  cli = require(cliPath);\n}\n\nvar commands = options._;\n\nif (cli) {\n  cli.run();\n} else {\n  if (options._.length === 0 && (options.h || options.help)) {\n    console.log(['', '  Usage: react-native [command] [options]', '', '', '  Commands:', '', '    init <ProjectName> [options]  generates a new project and installs its dependencies', '', '  Options:', '', '    -h, --help    output usage information', '    -v, --version output the version number', ''].join('\\n'));\n    process.exit(0);\n  }\n\n  if (commands.length === 0) {\n    console.error('You did not pass any commands, run `react-native --help` to see a list of all available commands.');\n    process.exit(1);\n  }\n\n  switch (commands[0]) {\n    case 'init':\n      if (!commands[1]) {\n        console.error('Usage: react-native init <ProjectName> [--verbose]');\n        process.exit(1);\n      } else {\n        init(commands[1], options);\n      }\n\n      break;\n\n    default:\n      console.error('Command `%s` unrecognized. ' + 'Make sure that you have run `npm install` and that you are inside a react-native project.', commands[0]);\n      process.exit(1);\n      break;\n  }\n}\n\nfunction validateProjectName(name) {\n  if (!name.match(/^[$A-Z_][0-9A-Z_$]*$/i)) {\n    console.error('\"%s\" is not a valid name for a project. Please use a valid identifier ' + 'name (alphanumeric).', name);\n    process.exit(1);\n  }\n\n  if (name === 'React') {\n    console.error('\"%s\" is not a valid name for a project. Please do not use the ' + 'reserved word \"React\".', name);\n    process.exit(1);\n  }\n}\n/**\n * @param name Project name, e.g. 'AwesomeApp'.\n * @param options.verbose If true, will run 'npm install' in verbose mode (for debugging).\n * @param options.version Version of React Native to install, e.g. '0.38.0'.\n * @param options.npm If true, always use the npm command line client,\n *                       don't use yarn even if available.\n */\n\n\nfunction init(name, options) {\n  validateProjectName(name);\n\n  if (fs.existsSync(name)) {\n    createAfterConfirmation(name, options);\n  } else {\n    createProject(name, options);\n  }\n}\n\nfunction createAfterConfirmation(name, options) {\n  prompt.start();\n  var property = {\n    name: 'yesno',\n    message: 'Directory ' + name + ' already exists. Continue?',\n    validator: /y[es]*|n[o]?/,\n    warning: 'Must respond yes or no',\n    default: 'no'\n  };\n  prompt.get(property, function (err, result) {\n    if (result.yesno[0] === 'y') {\n      createProject(name, options);\n    } else {\n      console.log('Project initialization canceled');\n      process.exit();\n    }\n  });\n}\n\nfunction createProject(name, options) {\n  var root = path.resolve(name);\n  var projectName = path.basename(root);\n  console.log('This will walk you through creating a new React Native project in', root);\n\n  if (!fs.existsSync(root)) {\n    fs.mkdirSync(root);\n  }\n\n  var packageJson = {\n    name: projectName,\n    version: '0.0.1',\n    private: true,\n    scripts: {\n      start: 'node node_modules/react-native/local-cli/cli.js start'\n    }\n  };\n  fs.writeFileSync(path.join(root, 'package.json'), JSON.stringify(packageJson));\n  process.chdir(root);\n  run(root, projectName, options);\n}\n\nfunction getInstallPackage(rnPackage) {\n  var packageToInstall = 'react-native';\n  var isValidSemver = semver.valid(rnPackage);\n\n  if (isValidSemver) {\n    packageToInstall += '@' + isValidSemver;\n  } else if (rnPackage) {\n    // for tar.gz or alternative paths\n    packageToInstall = rnPackage;\n  }\n\n  return packageToInstall;\n}\n\nfunction run(root, projectName, options) {\n  // E.g. '0.38' or '/path/to/archive.tgz'\n  const rnPackage = options.version;\n  const forceNpmClient = options.npm;\n  const yarnVersion = !forceNpmClient && getYarnVersionIfAvailable();\n  var installCommand;\n\n  if (options.installCommand) {\n    // In CI environments it can be useful to provide a custom command,\n    // to set up and use an offline mirror for installing dependencies, for example.\n    installCommand = options.installCommand;\n  } else {\n    if (yarnVersion) {\n      console.log('Using yarn v' + yarnVersion);\n      console.log('Installing ' + getInstallPackage(rnPackage) + '...');\n      installCommand = 'yarn add ' + getInstallPackage(rnPackage) + ' --exact';\n\n      if (options.verbose) {\n        installCommand += ' --verbose';\n      }\n    } else {\n      console.log('Installing ' + getInstallPackage(rnPackage) + '...');\n\n      if (!forceNpmClient) {\n        console.log('Consider installing yarn to make this faster: https://yarnpkg.com');\n      }\n\n      installCommand = 'npm install --save --save-exact ' + getInstallPackage(rnPackage);\n\n      if (options.verbose) {\n        installCommand += ' --verbose';\n      }\n    }\n  }\n\n  try {\n    execSync(installCommand, {\n      stdio: 'inherit'\n    });\n  } catch (err) {\n    console.error(err);\n    console.error('Command `' + installCommand + '` failed.');\n    process.exit(1);\n  }\n\n  checkNodeVersion();\n  cli = require(CLI_MODULE_PATH());\n  cli.init(root, projectName);\n}\n\nfunction checkNodeVersion() {\n  var packageJson = require(REACT_NATIVE_PACKAGE_JSON_PATH());\n\n  if (!packageJson.engines || !packageJson.engines.node) {\n    return;\n  }\n\n  if (!semver.satisfies(process.version, packageJson.engines.node)) {\n    console.error(chalk.red('You are currently running Node %s but React Native requires %s. ' + 'Please use a supported version of Node.\\n' + 'See https://facebook.github.io/react-native/docs/getting-started.html'), process.version, packageJson.engines.node);\n  }\n}\n\nfunction printVersionsAndExit(reactNativePackageJsonPath) {\n  console.log('react-native-cli: ' + require('./package.json').version);\n\n  try {\n    console.log('react-native: ' + require(reactNativePackageJsonPath).version);\n  } catch (e) {\n    console.log('react-native: n/a - not inside a React Native project directory');\n  }\n\n  process.exit();\n}","map":{"version":3,"sources":["C:/xampp/htdocs/dh-projeto-integrador-tn142020/app/react-app/node_modules/react-native-cli/index.js"],"names":["fs","require","path","exec","execSync","chalk","prompt","semver","options","process","argv","slice","CLI_MODULE_PATH","resolve","cwd","REACT_NATIVE_PACKAGE_JSON_PATH","_","length","v","version","printVersionsAndExit","getYarnVersionIfAvailable","yarnVersion","platform","startsWith","toString","trim","error","gte","console","cli","cliPath","existsSync","commands","run","h","help","log","join","exit","init","validateProjectName","name","match","createAfterConfirmation","createProject","start","property","message","validator","warning","default","get","err","result","yesno","root","projectName","basename","mkdirSync","packageJson","private","scripts","writeFileSync","JSON","stringify","chdir","getInstallPackage","rnPackage","packageToInstall","isValidSemver","valid","forceNpmClient","npm","installCommand","verbose","stdio","checkNodeVersion","engines","node","satisfies","red","reactNativePackageJsonPath","e"],"mappings":"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","sourcesContent":["#!/usr/bin/env node\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n// /!\\ DO NOT MODIFY THIS FILE /!\\\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//\n// react-native-cli is installed globally on people's computers. This means\n// that it is extremely difficult to have them upgrade the version and\n// because there's only one global version installed, it is very prone to\n// breaking changes.\n//\n// The only job of react-native-cli is to init the repository and then\n// forward all the commands to the local version of react-native.\n//\n// If you need to add a new command, please add it to local-cli/.\n//\n// The only reason to modify this file is to add more warnings and\n// troubleshooting information for the `react-native init` command.\n//\n// Do not make breaking changes! We absolutely don't want to have to\n// tell people to update their global version of react-native-cli.\n//\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n// /!\\ DO NOT MODIFY THIS FILE /!\\\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n'use strict';\n\nvar fs = require('fs');\nvar path = require('path');\nvar exec = require('child_process').exec;\nvar execSync = require('child_process').execSync;\nvar chalk = require('chalk');\nvar prompt = require('prompt');\nvar semver = require('semver');\n/**\n * Used arguments:\n *   -v --version - to print current version of react-native-cli and react-native dependency\n *   if you are in a RN app folder\n * init - to create a new project and npm install it\n *   --verbose - to print logs while init\n *   --version <alternative react-native package> - override default (https://registry.npmjs.org/react-native@latest),\n *      package to install, examples:\n *     - \"0.22.0-rc1\" - A new app will be created using a specific version of React Native from npm repo\n *     - \"https://registry.npmjs.org/react-native/-/react-native-0.20.0.tgz\" - a .tgz archive from any npm repo\n *     - \"/Users/home/react-native/react-native-0.22.0.tgz\" - for package prepared with `npm pack`, useful for e2e tests\n */\n\nvar options = require('minimist')(process.argv.slice(2));\n\nvar CLI_MODULE_PATH = function() {\n  return path.resolve(\n    process.cwd(),\n    'node_modules',\n    'react-native',\n    'cli.js'\n  );\n};\n\nvar REACT_NATIVE_PACKAGE_JSON_PATH = function() {\n  return path.resolve(\n    process.cwd(),\n    'node_modules',\n    'react-native',\n    'package.json'\n  );\n};\n\nif (options._.length === 0 && (options.v || options.version)) {\n  printVersionsAndExit(REACT_NATIVE_PACKAGE_JSON_PATH());\n}\n\n// Use Yarn if available, it's much faster than the npm client.\n// Return the version of yarn installed on the system, null if yarn is not available.\nfunction getYarnVersionIfAvailable() {\n  var yarnVersion;\n  try {\n    // execSync returns a Buffer -> convert to string\n    if (process.platform.startsWith('win')) {\n      yarnVersion = (execSync('yarn --version').toString() || '').trim();\n    } else {\n      yarnVersion = (execSync('yarn --version 2>/dev/null').toString() || '').trim();\n    }\n  } catch (error) {\n    return null;\n  }\n  // yarn < 0.16 has a 'missing manifest' bug\n  try {\n    if (semver.gte(yarnVersion, '0.16.0')) {\n      return yarnVersion;\n    } else {\n      return null;\n    }\n  } catch (error) {\n    console.error('Cannot parse yarn version: ' + yarnVersion);\n    return null;\n  }\n}\n\nvar cli;\nvar cliPath = CLI_MODULE_PATH();\nif (fs.existsSync(cliPath)) {\n  cli = require(cliPath);\n}\n\nvar commands = options._;\nif (cli) {\n  cli.run();\n} else {\n  if (options._.length === 0 && (options.h || options.help)) {\n    console.log([\n      '',\n      '  Usage: react-native [command] [options]',\n      '',\n      '',\n      '  Commands:',\n      '',\n      '    init <ProjectName> [options]  generates a new project and installs its dependencies',\n      '',\n      '  Options:',\n      '',\n      '    -h, --help    output usage information',\n      '    -v, --version output the version number',\n      '',\n    ].join('\\n'));\n    process.exit(0);\n  }\n\n  if (commands.length === 0) {\n    console.error(\n      'You did not pass any commands, run `react-native --help` to see a list of all available commands.'\n    );\n    process.exit(1);\n  }\n\n  switch (commands[0]) {\n  case 'init':\n    if (!commands[1]) {\n      console.error(\n        'Usage: react-native init <ProjectName> [--verbose]'\n      );\n      process.exit(1);\n    } else {\n      init(commands[1], options);\n    }\n    break;\n  default:\n    console.error(\n      'Command `%s` unrecognized. ' +\n      'Make sure that you have run `npm install` and that you are inside a react-native project.',\n      commands[0]\n    );\n    process.exit(1);\n    break;\n  }\n}\n\nfunction validateProjectName(name) {\n  if (!name.match(/^[$A-Z_][0-9A-Z_$]*$/i)) {\n    console.error(\n      '\"%s\" is not a valid name for a project. Please use a valid identifier ' +\n        'name (alphanumeric).',\n      name\n    );\n    process.exit(1);\n  }\n\n  if (name === 'React') {\n    console.error(\n      '\"%s\" is not a valid name for a project. Please do not use the ' +\n        'reserved word \"React\".',\n      name\n    );\n    process.exit(1);\n  }\n}\n\n/**\n * @param name Project name, e.g. 'AwesomeApp'.\n * @param options.verbose If true, will run 'npm install' in verbose mode (for debugging).\n * @param options.version Version of React Native to install, e.g. '0.38.0'.\n * @param options.npm If true, always use the npm command line client,\n *                       don't use yarn even if available.\n */\nfunction init(name, options) {\n  validateProjectName(name);\n\n  if (fs.existsSync(name)) {\n    createAfterConfirmation(name, options);\n  } else {\n    createProject(name, options);\n  }\n}\n\nfunction createAfterConfirmation(name, options) {\n  prompt.start();\n\n  var property = {\n    name: 'yesno',\n    message: 'Directory ' + name + ' already exists. Continue?',\n    validator: /y[es]*|n[o]?/,\n    warning: 'Must respond yes or no',\n    default: 'no'\n  };\n\n  prompt.get(property, function (err, result) {\n    if (result.yesno[0] === 'y') {\n      createProject(name, options);\n    } else {\n      console.log('Project initialization canceled');\n      process.exit();\n    }\n  });\n}\n\nfunction createProject(name, options) {\n  var root = path.resolve(name);\n  var projectName = path.basename(root);\n\n  console.log(\n    'This will walk you through creating a new React Native project in',\n    root\n  );\n\n  if (!fs.existsSync(root)) {\n    fs.mkdirSync(root);\n  }\n\n  var packageJson = {\n    name: projectName,\n    version: '0.0.1',\n    private: true,\n    scripts: {\n      start: 'node node_modules/react-native/local-cli/cli.js start'\n    }\n  };\n  fs.writeFileSync(path.join(root, 'package.json'), JSON.stringify(packageJson));\n  process.chdir(root);\n\n  run(root, projectName, options);\n}\n\nfunction getInstallPackage(rnPackage) {\n  var packageToInstall = 'react-native';\n  var isValidSemver = semver.valid(rnPackage);\n  if (isValidSemver) {\n    packageToInstall += '@' + isValidSemver;\n  } else if (rnPackage) {\n    // for tar.gz or alternative paths\n    packageToInstall = rnPackage;\n  }\n  return packageToInstall;\n}\n\nfunction run(root, projectName, options) {\n  // E.g. '0.38' or '/path/to/archive.tgz'\n  const rnPackage = options.version;\n  const forceNpmClient = options.npm;\n  const yarnVersion = (!forceNpmClient) && getYarnVersionIfAvailable();\n  var installCommand;\n  if (options.installCommand) {\n    // In CI environments it can be useful to provide a custom command,\n    // to set up and use an offline mirror for installing dependencies, for example.\n    installCommand = options.installCommand;\n  } else {\n    if (yarnVersion) {\n      console.log('Using yarn v' + yarnVersion);\n      console.log('Installing ' + getInstallPackage(rnPackage) + '...');\n      installCommand = 'yarn add ' + getInstallPackage(rnPackage) + ' --exact';\n      if (options.verbose) {\n        installCommand += ' --verbose';\n      }\n    } else {\n      console.log('Installing ' + getInstallPackage(rnPackage) + '...');\n      if (!forceNpmClient) {\n        console.log('Consider installing yarn to make this faster: https://yarnpkg.com');\n      }\n      installCommand = 'npm install --save --save-exact ' + getInstallPackage(rnPackage);\n      if (options.verbose) {\n        installCommand += ' --verbose';\n      }\n    }\n  }\n  try {\n    execSync(installCommand, {stdio: 'inherit'});\n  } catch (err) {\n    console.error(err);\n    console.error('Command `' + installCommand + '` failed.');\n    process.exit(1);\n  }\n  checkNodeVersion();\n  cli = require(CLI_MODULE_PATH());\n  cli.init(root, projectName);\n}\n\nfunction checkNodeVersion() {\n  var packageJson = require(REACT_NATIVE_PACKAGE_JSON_PATH());\n  if (!packageJson.engines || !packageJson.engines.node) {\n    return;\n  }\n  if (!semver.satisfies(process.version, packageJson.engines.node)) {\n    console.error(chalk.red(\n        'You are currently running Node %s but React Native requires %s. ' +\n        'Please use a supported version of Node.\\n' +\n        'See https://facebook.github.io/react-native/docs/getting-started.html'\n      ),\n      process.version,\n      packageJson.engines.node);\n  }\n}\n\nfunction printVersionsAndExit(reactNativePackageJsonPath) {\n  console.log('react-native-cli: ' + require('./package.json').version);\n  try {\n    console.log('react-native: ' + require(reactNativePackageJsonPath).version);\n  } catch (e) {\n    console.log('react-native: n/a - not inside a React Native project directory');\n  }\n  process.exit();\n}\n\n"]},"metadata":{},"sourceType":"script"}